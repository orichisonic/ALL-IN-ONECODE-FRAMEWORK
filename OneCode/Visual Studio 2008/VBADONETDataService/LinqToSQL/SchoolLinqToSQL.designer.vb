'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace LinqToSQL
    <System.Data.Linq.Mapping.DatabaseAttribute(Name:="SQLServer2005DB")> _
    Partial Public Class SchoolLinqToSQLDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertCourse(ByVal instance As Course)
        End Sub
        Partial Private Sub UpdateCourse(ByVal instance As Course)
        End Sub
        Partial Private Sub DeleteCourse(ByVal instance As Course)
        End Sub
        Partial Private Sub InsertCourseGrade(ByVal instance As CourseGrade)
        End Sub
        Partial Private Sub UpdateCourseGrade(ByVal instance As CourseGrade)
        End Sub
        Partial Private Sub DeleteCourseGrade(ByVal instance As CourseGrade)
        End Sub
        Partial Private Sub InsertCourseInstructor(ByVal instance As CourseInstructor)
        End Sub
        Partial Private Sub UpdateCourseInstructor(ByVal instance As CourseInstructor)
        End Sub
        Partial Private Sub DeleteCourseInstructor(ByVal instance As CourseInstructor)
        End Sub
        Partial Private Sub InsertPerson(ByVal instance As Person)
        End Sub
        Partial Private Sub UpdatePerson(ByVal instance As Person)
        End Sub
        Partial Private Sub DeletePerson(ByVal instance As Person)
        End Sub
#End Region

        Public Sub New()
            MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SQLServer2005DBConnectionString").ConnectionString, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Courses() As System.Data.Linq.Table(Of Course)
            Get
                Return Me.GetTable(Of Course)()
            End Get
        End Property

        Public ReadOnly Property CourseGrades() As System.Data.Linq.Table(Of CourseGrade)
            Get
                Return Me.GetTable(Of CourseGrade)()
            End Get
        End Property

        Public ReadOnly Property CourseInstructors() As System.Data.Linq.Table(Of CourseInstructor)
            Get
                Return Me.GetTable(Of CourseInstructor)()
            End Get
        End Property

        Public ReadOnly Property Persons() As System.Data.Linq.Table(Of Person)
            Get
                Return Me.GetTable(Of Person)()
            End Get
        End Property
    End Class

    <Table(Name:="dbo.Course")> _
    Partial Public Class Course
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CourseID As Integer

        Private _Title As String

        Private _Credits As Integer

        Private _DepartmentID As Integer

        Private _CourseGrades As EntitySet(Of CourseGrade)

        Private _CourseInstructors As EntitySet(Of CourseInstructor)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCourseIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCourseIDChanged()
        End Sub
        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnCreditsChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCreditsChanged()
        End Sub
        Partial Private Sub OnDepartmentIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnDepartmentIDChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._CourseGrades = New EntitySet(Of CourseGrade)(AddressOf Me.attach_CourseGrades, AddressOf Me.detach_CourseGrades)
            Me._CourseInstructors = New EntitySet(Of CourseInstructor)(AddressOf Me.attach_CourseInstructors, AddressOf Me.detach_CourseInstructors)
            OnCreated()
        End Sub

        <Column(Storage:="_CourseID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property CourseID() As Integer
            Get
                Return Me._CourseID
            End Get
            Set(ByVal value As Integer)
                If ((Me._CourseID = value) _
                   = False) Then
                    Me.OnCourseIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CourseID = value
                    Me.SendPropertyChanged("CourseID")
                    Me.OnCourseIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Title", DbType:="NVarChar(100) NOT NULL", CanBeNull:=False)> _
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._Title, value) = False) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Credits", DbType:="Int NOT NULL")> _
        Public Property Credits() As Integer
            Get
                Return Me._Credits
            End Get
            Set(ByVal value As Integer)
                If ((Me._Credits = value) _
                   = False) Then
                    Me.OnCreditsChanging(value)
                    Me.SendPropertyChanging()
                    Me._Credits = value
                    Me.SendPropertyChanged("Credits")
                    Me.OnCreditsChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_DepartmentID", DbType:="Int NOT NULL")> _
        Public Property DepartmentID() As Integer
            Get
                Return Me._DepartmentID
            End Get
            Set(ByVal value As Integer)
                If ((Me._DepartmentID = value) _
                   = False) Then
                    Me.OnDepartmentIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._DepartmentID = value
                    Me.SendPropertyChanged("DepartmentID")
                    Me.OnDepartmentIDChanged()
                End If
            End Set
        End Property

        <Association(Name:="Course_CourseGrade", Storage:="_CourseGrades", ThisKey:="CourseID", OtherKey:="CourseID")> _
        Public Property CourseGrades() As EntitySet(Of CourseGrade)
            Get
                Return Me._CourseGrades
            End Get
            Set(ByVal value As EntitySet(Of CourseGrade))
                Me._CourseGrades.Assign(value)
            End Set
        End Property

        <Association(Name:="Course_CourseInstructor", Storage:="_CourseInstructors", ThisKey:="CourseID", OtherKey:="CourseID")> _
        Public Property CourseInstructors() As EntitySet(Of CourseInstructor)
            Get
                Return Me._CourseInstructors
            End Get
            Set(ByVal value As EntitySet(Of CourseInstructor))
                Me._CourseInstructors.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_CourseGrades(ByVal entity As CourseGrade)
            Me.SendPropertyChanging()
            entity.Course = Me
        End Sub

        Private Sub detach_CourseGrades(ByVal entity As CourseGrade)
            Me.SendPropertyChanging()
            entity.Course = Nothing
        End Sub

        Private Sub attach_CourseInstructors(ByVal entity As CourseInstructor)
            Me.SendPropertyChanging()
            entity.Course = Me
        End Sub

        Private Sub detach_CourseInstructors(ByVal entity As CourseInstructor)
            Me.SendPropertyChanging()
            entity.Course = Nothing
        End Sub
    End Class

    <Table(Name:="dbo.CourseGrade")> _
    Partial Public Class CourseGrade
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _EnrollmentID As Integer

        Private _CourseID As Integer

        Private _StudentID As Integer

        Private _Grade As System.Nullable(Of Decimal)

        Private _Course As EntityRef(Of Course)

        Private _Person As EntityRef(Of Person)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnEnrollmentIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnEnrollmentIDChanged()
        End Sub
        Partial Private Sub OnCourseIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCourseIDChanged()
        End Sub
        Partial Private Sub OnStudentIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnStudentIDChanged()
        End Sub
        Partial Private Sub OnGradeChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnGradeChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._Course = CType(Nothing, EntityRef(Of Course))
            Me._Person = CType(Nothing, EntityRef(Of Person))
            OnCreated()
        End Sub

        <Column(Storage:="_EnrollmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property EnrollmentID() As Integer
            Get
                Return Me._EnrollmentID
            End Get
            Set(ByVal value As Integer)
                If ((Me._EnrollmentID = value) _
                   = False) Then
                    Me.OnEnrollmentIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._EnrollmentID = value
                    Me.SendPropertyChanged("EnrollmentID")
                    Me.OnEnrollmentIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CourseID", DbType:="Int NOT NULL")> _
        Public Property CourseID() As Integer
            Get
                Return Me._CourseID
            End Get
            Set(ByVal value As Integer)
                If ((Me._CourseID = value) _
                   = False) Then
                    If Me._Course.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnCourseIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CourseID = value
                    Me.SendPropertyChanged("CourseID")
                    Me.OnCourseIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_StudentID", DbType:="Int NOT NULL")> _
        Public Property StudentID() As Integer
            Get
                Return Me._StudentID
            End Get
            Set(ByVal value As Integer)
                If ((Me._StudentID = value) _
                   = False) Then
                    If Me._Person.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnStudentIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._StudentID = value
                    Me.SendPropertyChanged("StudentID")
                    Me.OnStudentIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Grade", DbType:="Decimal(3,2)")> _
        Public Property Grade() As System.Nullable(Of Decimal)
            Get
                Return Me._Grade
            End Get
            Set(ByVal value As System.Nullable(Of Decimal))
                If (Me._Grade.Equals(value) = False) Then
                    Me.OnGradeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Grade = value
                    Me.SendPropertyChanged("Grade")
                    Me.OnGradeChanged()
                End If
            End Set
        End Property

        <Association(Name:="Course_CourseGrade", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=True)> _
        Public Property Course() As Course
            Get
                Return Me._Course.Entity
            End Get
            Set(ByVal value As Course)
                Dim previousValue As Course = Me._Course.Entity
                If ((Object.Equals(previousValue, value) = False) _
                   OrElse (Me._Course.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Course.Entity = Nothing
                        previousValue.CourseGrades.Remove(Me)
                    End If
                    Me._Course.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.CourseGrades.Add(Me)
                        Me._CourseID = value.CourseID
                    Else
                        Me._CourseID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Course")
                End If
            End Set
        End Property

        <Association(Name:="Person_CourseGrade", Storage:="_Person", ThisKey:="StudentID", OtherKey:="PersonID", IsForeignKey:=True)> _
        Public Property Person() As Person
            Get
                Return Me._Person.Entity
            End Get
            Set(ByVal value As Person)
                Dim previousValue As Person = Me._Person.Entity
                If ((Object.Equals(previousValue, value) = False) _
                   OrElse (Me._Person.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Person.Entity = Nothing
                        previousValue.CourseGrades.Remove(Me)
                    End If
                    Me._Person.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.CourseGrades.Add(Me)
                        Me._StudentID = value.PersonID
                    Else
                        Me._StudentID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Person")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.CourseInstructor")> _
    Partial Public Class CourseInstructor
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CourseID As Integer

        Private _PersonID As Integer

        Private _Course As EntityRef(Of Course)

        Private _Person As EntityRef(Of Person)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCourseIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCourseIDChanged()
        End Sub
        Partial Private Sub OnPersonIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnPersonIDChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._Course = CType(Nothing, EntityRef(Of Course))
            Me._Person = CType(Nothing, EntityRef(Of Person))
            OnCreated()
        End Sub

        <Column(Storage:="_CourseID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property CourseID() As Integer
            Get
                Return Me._CourseID
            End Get
            Set(ByVal value As Integer)
                If ((Me._CourseID = value) _
                   = False) Then
                    If Me._Course.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnCourseIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CourseID = value
                    Me.SendPropertyChanged("CourseID")
                    Me.OnCourseIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PersonID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property PersonID() As Integer
            Get
                Return Me._PersonID
            End Get
            Set(ByVal value As Integer)
                If ((Me._PersonID = value) _
                   = False) Then
                    If Me._Person.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnPersonIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._PersonID = value
                    Me.SendPropertyChanged("PersonID")
                    Me.OnPersonIDChanged()
                End If
            End Set
        End Property

        <Association(Name:="Course_CourseInstructor", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=True)> _
        Public Property Course() As Course
            Get
                Return Me._Course.Entity
            End Get
            Set(ByVal value As Course)
                Dim previousValue As Course = Me._Course.Entity
                If ((Object.Equals(previousValue, value) = False) _
                   OrElse (Me._Course.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Course.Entity = Nothing
                        previousValue.CourseInstructors.Remove(Me)
                    End If
                    Me._Course.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.CourseInstructors.Add(Me)
                        Me._CourseID = value.CourseID
                    Else
                        Me._CourseID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Course")
                End If
            End Set
        End Property

        <Association(Name:="Person_CourseInstructor", Storage:="_Person", ThisKey:="PersonID", OtherKey:="PersonID", IsForeignKey:=True)> _
        Public Property Person() As Person
            Get
                Return Me._Person.Entity
            End Get
            Set(ByVal value As Person)
                Dim previousValue As Person = Me._Person.Entity
                If ((Object.Equals(previousValue, value) = False) _
                   OrElse (Me._Person.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Person.Entity = Nothing
                        previousValue.CourseInstructors.Remove(Me)
                    End If
                    Me._Person.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.CourseInstructors.Add(Me)
                        Me._PersonID = value.PersonID
                    Else
                        Me._PersonID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Person")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Person")> _
    Partial Public Class Person
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _PersonID As Integer

        Private _LastName As String

        Private _FirstName As String

        Private _PersonCategory As Short

        Private _HireDate As System.Nullable(Of Date)

        Private _EnrollmentDate As System.Nullable(Of Date)

        Private _Picture As System.Data.Linq.Binary

        Private _CourseGrades As EntitySet(Of CourseGrade)

        Private _CourseInstructors As EntitySet(Of CourseInstructor)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnPersonIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnPersonIDChanged()
        End Sub
        Partial Private Sub OnLastNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnLastNameChanged()
        End Sub
        Partial Private Sub OnFirstNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFirstNameChanged()
        End Sub
        Partial Private Sub OnPersonCategoryChanging(ByVal value As Short)
        End Sub
        Partial Private Sub OnPersonCategoryChanged()
        End Sub
        Partial Private Sub OnHireDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnHireDateChanged()
        End Sub
        Partial Private Sub OnEnrollmentDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnEnrollmentDateChanged()
        End Sub
        Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
        End Sub
        Partial Private Sub OnPictureChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._CourseGrades = New EntitySet(Of CourseGrade)(AddressOf Me.attach_CourseGrades, AddressOf Me.detach_CourseGrades)
            Me._CourseInstructors = New EntitySet(Of CourseInstructor)(AddressOf Me.attach_CourseInstructors, AddressOf Me.detach_CourseInstructors)
            OnCreated()
        End Sub

        <Column(Storage:="_PersonID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property PersonID() As Integer
            Get
                Return Me._PersonID
            End Get
            Set(ByVal value As Integer)
                If ((Me._PersonID = value) _
                   = False) Then
                    Me.OnPersonIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._PersonID = value
                    Me.SendPropertyChanged("PersonID")
                    Me.OnPersonIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property LastName() As String
            Get
                Return Me._LastName
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._LastName, value) = False) Then
                    Me.OnLastNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastName = value
                    Me.SendPropertyChanged("LastName")
                    Me.OnLastNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property FirstName() As String
            Get
                Return Me._FirstName
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._FirstName, value) = False) Then
                    Me.OnFirstNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FirstName = value
                    Me.SendPropertyChanged("FirstName")
                    Me.OnFirstNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PersonCategory", DbType:="SmallInt NOT NULL")> _
        Public Property PersonCategory() As Short
            Get
                Return Me._PersonCategory
            End Get
            Set(ByVal value As Short)
                If ((Me._PersonCategory = value) _
                   = False) Then
                    Me.OnPersonCategoryChanging(value)
                    Me.SendPropertyChanging()
                    Me._PersonCategory = value
                    Me.SendPropertyChanged("PersonCategory")
                    Me.OnPersonCategoryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_HireDate", DbType:="DateTime")> _
        Public Property HireDate() As System.Nullable(Of Date)
            Get
                Return Me._HireDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._HireDate.Equals(value) = False) Then
                    Me.OnHireDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._HireDate = value
                    Me.SendPropertyChanged("HireDate")
                    Me.OnHireDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_EnrollmentDate", DbType:="DateTime")> _
        Public Property EnrollmentDate() As System.Nullable(Of Date)
            Get
                Return Me._EnrollmentDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._EnrollmentDate.Equals(value) = False) Then
                    Me.OnEnrollmentDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._EnrollmentDate = value
                    Me.SendPropertyChanged("EnrollmentDate")
                    Me.OnEnrollmentDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Picture() As System.Data.Linq.Binary
            Get
                Return Me._Picture
            End Get
            Set(ByVal value As System.Data.Linq.Binary)
                If (Object.Equals(Me._Picture, value) = False) Then
                    Me.OnPictureChanging(value)
                    Me.SendPropertyChanging()
                    Me._Picture = value
                    Me.SendPropertyChanged("Picture")
                    Me.OnPictureChanged()
                End If
            End Set
        End Property

        <Association(Name:="Person_CourseGrade", Storage:="_CourseGrades", ThisKey:="PersonID", OtherKey:="StudentID")> _
        Public Property CourseGrades() As EntitySet(Of CourseGrade)
            Get
                Return Me._CourseGrades
            End Get
            Set(ByVal value As EntitySet(Of CourseGrade))
                Me._CourseGrades.Assign(value)
            End Set
        End Property

        <Association(Name:="Person_CourseInstructor", Storage:="_CourseInstructors", ThisKey:="PersonID", OtherKey:="PersonID")> _
        Public Property CourseInstructors() As EntitySet(Of CourseInstructor)
            Get
                Return Me._CourseInstructors
            End Get
            Set(ByVal value As EntitySet(Of CourseInstructor))
                Me._CourseInstructors.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_CourseGrades(ByVal entity As CourseGrade)
            Me.SendPropertyChanging()
            entity.Person = Me
        End Sub

        Private Sub detach_CourseGrades(ByVal entity As CourseGrade)
            Me.SendPropertyChanging()
            entity.Person = Nothing
        End Sub

        Private Sub attach_CourseInstructors(ByVal entity As CourseInstructor)
            Me.SendPropertyChanging()
            entity.Person = Me
        End Sub

        Private Sub detach_CourseInstructors(ByVal entity As CourseInstructor)
            Me.SendPropertyChanging()
            entity.Person = Nothing
        End Sub
    End Class
End Namespace