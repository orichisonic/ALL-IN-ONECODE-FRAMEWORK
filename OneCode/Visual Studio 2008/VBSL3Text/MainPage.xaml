<UserControl x:Class="VBSL3Text.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    mc:Ignorable="d" d:DesignWidth="640" d:DesignHeight="1000" Loaded="UserControl_Loaded">
    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel x:Name="LayoutRoot">
            <TextBlock Style="{StaticResource Paragraph1}" TextWrapping="Wrap" Text="Work with text in code"/>
            <TextBlock Style="{StaticResource Parapraph2}" Text="Construct TextBlock" TextWrapping="Wrap"/>
            <!-- The following section demostrates how to construct a simple TextBlock in code. Refer to the CreateSimpleTextBlock method in code behind. -->
            <TextBlock TextWrapping="Wrap" Text="To construct a simple TextBlock, please refer to the following code:"/>
            <TextBox Style="{StaticResource NoBorderTextBoxStyle}" IsReadOnly="True" Text="  Dim simpleTextBlock = New TextBlock()&#xd;&#xa;  simpleTextBlock.Text = &quot;Simple TextBlock&quot;&#xd;&#xa;  Me.simpleTBPlaceHolder.Children.Add(simpleTextBlock)" TextWrapping="Wrap"/>
            <TextBlock Text="Result:" TextWrapping="Wrap"/>
            <StackPanel x:Name="simpleTBPlaceHolder"/>

            <!-- The following section demostrates how to construct a complex TextBlock in code. Refer to the CreateComplexTextBlock method in code behind. -->
            <TextBlock Margin="0,5,0,0" Text="To construct a complex TextBlock with Run, please refer to the following code:" TextWrapping="Wrap"/>
            <TextBox Style="{StaticResource NoBorderTextBoxStyle}" IsReadOnly="True" Text="  Dim complexTextBlock = New TextBlock()&#xd;&#xa;  Dim paragraph1 = New Run()&#xd;&#xa;  paragraph1.Text = &quot;Paragraph1&quot;&#xd;&#xa;  Dim lineBreak = New LineBreak()&#xd;&#xa;  Dim paragraph2 = New Run()&#xd;&#xa;  paragraph2.Text = &quot;Paragraph2&quot;&#xd;&#xa;  complexTextBlock.Inlines.Add(paragraph1)&#xd;&#xa;  complexTextBlock.Inlines.Add(lineBreak)&#xd;&#xa;  complexTextBlock.Inlines.Add(paragraph2)&#xd;&#xa;  Me.complexTBPlaceHolder.Children.Add(complexTextBlock)" TextWrapping="Wrap"/>
            <TextBlock Text="Result:" TextWrapping="Wrap"/>
            <StackPanel x:Name="complexTBPlaceHolder"/>

            <!-- The following section demostrates how to format TextBlocks in code. Refer to the FormatText method in code behind. -->
            <TextBlock Margin="0,10,0,0" Style="{StaticResource Parapraph2}" Text="Customize text format" TextWrapping="Wrap"/>
            <TextBlock Text="To customize text format, please refer to the following code:" TextWrapping="Wrap"/>
            <TextBox Style="{StaticResource NoBorderTextBoxStyle}" IsReadOnly="True" Text="  Dim formatTextBlock = New TextBlock()&#xd;&#xa;  Dim paragraph1 = New Run()&#xd;&#xa;  paragraph1.Text = &quot;Paragraph1&quot;&#xd;&#xa;  paragraph1.FontFamily = New FontFamily(&quot;Magnetob.ttf#Magneto&quot;)&#xd;&#xa;  Dim lineBreak = New LineBreak()&#xd;&#xa;  Dim paragraph2 = New Run()&#xd;&#xa;  paragraph2.Text = &quot;Paragraph2&quot;&#xd;&#xa;  Dim brush = New LinearGradientBrush()&#xd;&#xa;  Dim stop1 = New GradientStop()&#xd;&#xa;  stop1.Color = Colors.Blue&#xd;&#xa;  stop1.Offset = 0D&#xd;&#xa;  brush.GradientStops.Add(stop1)&#xd;&#xa;  Dim stop2 = New GradientStop()&#xd;&#xa;  stop2.Color = Colors.Red&#xd;&#xa;  stop2.Offset = 1D&#xd;&#xa;  brush.GradientStops.Add(stop2)&#xd;&#xa;  paragraph2.Foreground = brush&#xd;&#xa;  formatTextBlock.Inlines.Add(paragraph1)&#xd;&#xa;  formatTextBlock.Inlines.Add(lineBreak)&#xd;&#xa;  formatTextBlock.Inlines.Add(paragraph2)&#xd;&#xa;  Me.customizeFormatPlaceHolder.Children.Add(formatTextBlock)" TextWrapping="Wrap"/>
            <TextBlock Text="Result:" TextWrapping="Wrap"/>
            <StackPanel x:Name="customizeFormatPlaceHolder"/>

            <!-- The following section demostrates how to select texts in a TextBox programatically. Refer to the selectTextButton_Click method in code behind. -->
            <TextBlock Margin="0,10,0,0" Style="{StaticResource Parapraph2}" Text="Select text in TextBox" TextWrapping="Wrap"/>
            <TextBlock Text="The following sample demostrates how to select all the text in a TextBox. Note you have to focus the TextBox so that the selection will be displayed." TextWrapping="Wrap"/>
            <TextBox Style="{StaticResource NoBorderTextBoxStyle}" IsReadOnly="True" Text="  Me.targetTextBox.SelectAll()&#xd;&#xa;  Me.targetTextBox.Focus()" TextWrapping="Wrap"/>
            <TextBox x:Name="targetTextBox" Text="Some text" TextWrapping="Wrap"/>
            <StackPanel Orientation="Vertical" Margin="0,3,0,0">
                <Button x:Name="selectTextButton" HorizontalAlignment="Left" Content="Select All Text" Click="selectTextButton_Click"/>
            </StackPanel>

            <TextBlock Margin="0,10,0,0" Style="{StaticResource Parapraph2}" Text="Recommendation in choosing XAML or code" TextWrapping="Wrap"/>
            <TextBlock TextWrapping="Wrap" Text="As you can see in the XAML based and code based samples, writing XAML is much easier than writing code. We can only demostrate text formats that are not too complex in this sample. You can also use a tool such as Expression Blend to help you format the text. So for static texts, it is always recommended to use XAML only solution. For dynamic texts, in most scenarios, you can create pre-formated TextBlock working as place holders in XAML, and populate the actual text dynamically in code. Even if you don't know how many TextBlocks needed in advance, sometimes you can still create a Style for TextBlock in XAML, construct TextBlocks in code, and apply the pre-configured style. In short, whenever you can use XAML, please do not mess with code."/>
        </StackPanel>
    </ScrollViewer>
</UserControl>
