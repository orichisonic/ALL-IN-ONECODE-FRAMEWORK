========================================================================
    ACTIVE TEMPLATE LIBRARY : ATLExeCOMServer Project Overview
========================================================================

/////////////////////////////////////////////////////////////////////////////
Summary:

The ATLDllCOMServer sample demonstrates how to use Acitve Template Library 
(ATL) wizards in Visual Studio 2008 to generate an out-of-process COM server. 
ATL is designed to simplify the process of creating efficient, flexible, 
lightweight COM components. ATLExeCOMServer exposes an ATL STA simple object 
with properties, methods, and events:

  (Please generate new GUIDs when you are writing your own COM server)
  Program ID: ATLExeCOMServer.SimpleObject
  CLSID_SimpleObject: 9465BE08-C9FA-4DDF-A56E-57B92BCDEEB0
  IID_ISimpleObject: 47E764FE-D065-4BDE-8943-30F46664B02C
  DIID__ISimpleObjectEvents: 6EE998B7-61C8-4D54-B27A-F623E8C1EA64
  LIBID_ATLExeCOMServerLib: C7902493-E23D-4487-824F-4AB97BD8B86D
  AppID: B711EE75-FDA3-4B0E-BFAA-67CB305D62AE

  Properties: 
    // With both get and put accessor methods
    FLOAT FloatProperty

  Methods: 
    // HelloWorld returns a BSTR "HelloWorld"
    HRESULT HelloWorld([out,retval] BSTR* pRet);
    // GetProcessThreadID outputs the running process ID and thread ID
    HRESULT GetProcessThreadID([out] LONG* pdwProcessId, [out] LONG* pdwThreadId);

  Events:
    // FloatPropertyChanging is fired before new value is set to the 
    // FloatProperty property. The [in, out] parameter Cancel allows the 
    // client to cancel the change of FloatProperty.
    void FloatPropertyChanging(
      [in] FLOAT NewValue, [in, out] VARIANT_BOOL* Cancel);

The majority of codes in the sample are generated by Visual Studio. You can 
find the detailed steps of creating such a COM server in the Creation section 
of this document. 


/////////////////////////////////////////////////////////////////////////////
Project Relation:

MFCCOMClient -> ATLExeCOMServer
MFCCOMClient demonstrates the use of the out-of-process component.

ATLExeCOMServer - ATLDllCOMServer - ATLCOMService
All are COM components written in ATL. ATLDllCOMServer is an in-process
component in the form of DLL, ATLExeCOMServer is an out-of-process component
in the form of EXE (Local Server), and ATLCOMService is an out-of-process 
component in the form of EXE (Local Service).


/////////////////////////////////////////////////////////////////////////////
Build:

To build ATLExeCOMServer, please run Visual Studio as administrator because the 
component needs to be registered into HKCR.


/////////////////////////////////////////////////////////////////////////////
Deployment:

A. Setup

ATLExeCOMServer.exe /Regserver
It registers the server as just a plain EXE. 

B. Cleanup

ATLExeCOMServer.exe /Unregserver
It removes the server from the system registry.


/////////////////////////////////////////////////////////////////////////////
Creation:

A. Creating the project

Step1. Create a Visual C++ / ATL / ATL Project named ATLExeCOMServer in Visual
Studio 2008.

Step2. In the page "Application Settings" of ATL Project Wizard, select the 
server type as Executable (EXE), and allow merging of proxy/stub code.

B. Adding an ATL Simple Object

Step1. In Solution Explorer, add a new ATL / ATL Simple Object class to the 
project.

Step2. In ATL Simple Object Wizard, specify the short name as 
SimpleObject, and select the threading model as Apartment (corresponding
to STA), select Interface as Dual that supports both IDispatch (late binding)
and vtable binding (early binding). Last, select the Connection points check 
box. This creates the _ISimpleObjectEvents interface in the file 
ATLExeCOMServer.idl. The Connection points option is the prerequisite for the 
component to supporting events.

C. Adding Properties to the ATL Simple Object

Step1. In Class View, find the interface ISimpleObject. Right click it 
and select Add / Add Property in the menu. 

Step2. In Add Property Wizard, specify the property type as FLOAT, property 
name as FloatProperty. Select both Get function and Put function. 
SimpleObject therefore exposes FloatProperty with the get&put accessor 
methods: get_FloatProperty, put_FloatProperty.

Step3. Add a float field, m_fField, to the class CSimpleObject:

	protected:
		// Used by FloatProperty
		float m_fField;
		
Implement the get&put accessor methods of FloatProperty to access m_fField.

	STDMETHODIMP CSimpleObject::get_FloatProperty(FLOAT* pVal)
	{
		*pVal = m_fField;
		return S_OK;
	}

	STDMETHODIMP CSimpleObject::put_FloatProperty(FLOAT newVal)
	{
		m_fField = newVal;
		return S_OK;
	}

D. Adding Methods to the ATL Simple Object

Step1. In Class View, find the interface ISimpleObject. Right-click it
and select Add / Add Method in the menu.

Step2. In Add Method Wizard, specify the method name as HelloWorld. Add a 
parameter whose parameter attributes = retval, parameter type = BSTR*, 
and parameter name = pRet.

Step3. Write the body of HelloWorld as this:

	STDMETHODIMP CSimpleObject::HelloWorld(BSTR* pRet)
	{
		// Allocate memory for the string: 
		*pRet = ::SysAllocString(L"HelloWorld");
		if (pRet == NULL)
			return E_OUTOFMEMORY;

		// The client is now responsible for freeing pbstr
		return S_OK;
	}

With the almost same steps, the method GetProcessThreadID is added to get the
executing process ID and thread ID.

HRESULT GetProcessThreadID([out] LONG* pdwProcessId, [out] LONG* pdwThreadId);

E. Adding Events to the ATL Simple Object

The Connection points option in B/Step2 is the prerequisite for the component
to supporting events.

Step1. In Class View, expand ATLExeCOMServer and ATLExeCOMServerLib to display
_ISimpleObjectEvents.

Step2. Right-click _ISimpleObjectEvents. In the menu, click Add, and 
then click Add Method.

Step3. Select a Return Type of void, enter FloatPropertyChanging in the
Method name box, and add an [in] parameter FLOAT NewValue, and an [in, out] 
parameter VARIANT_BOOL* Cancel. After clicking Finish, 
_ISimpleObjectEvents dispinterface in the ATLExeCOMServer.idl file 
should look like this: 

	dispinterface _ISimpleObjectEvents
	{
		properties:
		methods:
			[id(1), helpstring("method FloatPropertyChanging")] void 
			FloatPropertyChanging(
			[in] FLOAT NewValue, [in,out] VARIANT_BOOL* Cancel);
	};

Step4. Generate the type library by rebuilding the project or by 
right-clicking the ATLExeCOMServer.idl file in Solution Explorer and clicking
Compile on the shortcut menu. Please note: We must compile the IDL file 
BEFORE setting up a connection point.

Step5. Use the Implement Connection Point Wizard to implement the Connection
Point interface: In Class View, right-click the component's implementation 
class CSimpleObject. On the shortcut menu, click Add, and then click 
Add Connection Point. Select _ISimpleObjectEvents from the Source 
Interfaces list and double-click it to add it to the Implement connection 
points column. Click Finish. A proxy class for the connection point will be 
generated (ie. CProxy_ISimpleObjectEvents in this sample) in the file 
_ISimpleObjectEvents_CP.h. This also creates a function with the name
Fire_[eventname] which can be called to raise events in the client. 

Step6. Fire the event in put_FloatProperty:

	STDMETHODIMP CSimpleObject::put_FloatProperty(FLOAT newVal)
	{
		// Fire the event, FloatPropertyChanging
		VARIANT_BOOL cancel = VARIANT_FALSE; 
		Fire_FloatPropertyChanging(newVal, &cancel);

		if (cancel == VARIANT_FALSE)
		{
			m_fField = newVal;	// Save the new value
		} // else, do nothing
		return S_OK;
	}

F. Configuring and building the project as an ATL COM server

Step1. Right-click the ATLExeCOMServer project and select Properties to open 
its Property Pages. Turn to Build Events / Post Build Event, and make sure 
that "$(TargetPath)" /RegServer is in the Command Line.


/////////////////////////////////////////////////////////////////////////////
References:

ATL Tutorial
http://msdn.microsoft.com/en-us/library/599w5e7x.aspx


/////////////////////////////////////////////////////////////////////////////