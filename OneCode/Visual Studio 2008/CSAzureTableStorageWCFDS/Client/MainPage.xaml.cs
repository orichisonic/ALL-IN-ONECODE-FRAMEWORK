/****************************** Module Header ******************************\
* Module Name:	MainPage.xaml.cs
* Project:		CSAzureTableStorageWCFDS
* Copyright (c) Microsoft Corporation.
* 
* This is a test Silverlight client that verifies our WCF Data Service is working.
* 
* This source is subject to the Microsoft Public License.
* See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
* All other rights reserved.
* 
* THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
* EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED 
* WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
\***************************************************************************/

using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;
using Client.DataServiceReference;

namespace Client
{
	public partial class MainPage : UserControl
	{
		private PersonDataServiceContext _ctx;
		private ObservableCollection<Person> _dataSource = new ObservableCollection<Person>();

		public MainPage()
		{
			InitializeComponent();
		}

		private void UserControl_Loaded(object sender, RoutedEventArgs e)
		{
			// Use the relative URI to find the WCF Data Services.
			Uri uri = new Uri(App.Current.Host.Source, "../../DataService/PersonDataService.svc");
			// Load all entities.
			this._ctx = new PersonDataServiceContext(uri);
			this._ctx.Person.BeginExecute(result =>
			{
				var people = this._ctx.Person.EndExecute(result);
				this._dataSource.Clear();
				foreach (var person in people)
				{
					this._dataSource.Add(person);
				}
				this.MainDataGrid.ItemsSource = this._dataSource;
				this.NewButton.IsEnabled = true;
				this.DeleteButton.IsEnabled = true;
				this.UpdateButton.IsEnabled = true;
			}, null);
		}

		private void NewButton_Click(object sender, System.Windows.RoutedEventArgs e)
		{
			int age;
			if (this.ValidateInput(out age))
			{
				Person person = new Person() { Name = this.NameTextBox.Text, Age = age };
				this.InsertNewEntity(person);
			}
		}

		/// <summary>
		/// Invoke the WCF Data Services to insert a new entity.
		/// </summary>
		private void InsertNewEntity(Person person)
		{
			this._ctx.AddObject("Person", person);
			this._ctx.BeginSaveChanges(result =>
			{
				this._ctx.EndSaveChanges(result);
				this._dataSource.Insert(0, person);
				this.MainDataGrid.SelectedItem = person;
				MessageBox.Show("Entity successfully inserted!");
			}, null);
		}

		private void DeleteButton_Click(object sender, System.Windows.RoutedEventArgs e)
		{
			Person person = this.MainDataGrid.SelectedItem as Person;
			if (person != null)
			{
				this.DeleteEntity(person);
			}
			else
			{
				MessageBox.Show("Please select an item.");
			}
		}

		/// <summary>
		/// Invoke the WCF Data Services to delete the selected entity.
		/// </summary>
		private void DeleteEntity(Person person)
		{
			this._ctx.DeleteObject(person);
			this._ctx.BeginSaveChanges(result =>
			{
				this._ctx.EndSaveChanges(result);
				this._dataSource.Remove(person);
				this.MainDataGrid.SelectedItem = null;
				MessageBox.Show("Entity successfully deleted!");
			}, null);
		}

		private void UpdateButton_Click(object sender, System.Windows.RoutedEventArgs e)
		{
			int age;
			if (this.ValidateInput(out age))
			{
				Person personOld = this.MainDataGrid.SelectedItem as Person;
				if (personOld != null)
				{
					Person personNew = new Person(personOld.PartitionKey, personOld.RowKey) { Name = this.NameTextBox.Text, Age = age };
					this.UpdateEntity(personOld, personNew);
				}
				else
				{
					MessageBox.Show("Please select an item.");
				}
			}
		}

		/// <summary>
		/// Invoke the WCF Data Services to update the selected entity.
		/// </summary>
		private void UpdateEntity(Person personOld, Person personNew)
		{
			// Do not update UI unless the update succeeds. So detach personOld and attach personNew.
			this._ctx.Detach(personOld);
			this._ctx.AttachTo("Person", personNew);
			this._ctx.UpdateObject(personNew);
			this._ctx.BeginSaveChanges(result =>
			{
				this._ctx.EndSaveChanges(result);
				// Update the UI. Because the code generated by Data Service reference doesn't implement INotifyPropertyChanged, we'll remove the old entity and insert a new one in order to notify the UI... This only affects data on the client. It doesn't invoke the service again.
				int index = this._dataSource.IndexOf(personOld);
				this._dataSource.Remove(personOld);
				this._dataSource.Insert(index, personNew);
				this.MainDataGrid.SelectedItem = personNew;
				MessageBox.Show("Entity successfully updated!");
			}, null);
		}

		private bool ValidateInput(out int age)
		{
			age = 0;
			if (string.IsNullOrEmpty(this.NameTextBox.Text))
			{
				MessageBox.Show("Please type a name.");
				return false; ;
			}
			try
			{
				age = int.Parse(this.AgeTextBox.Text);
			}
			catch
			{
				MessageBox.Show("Invalid age.");
				return false;
			}
			return true;
		}
	}
}
